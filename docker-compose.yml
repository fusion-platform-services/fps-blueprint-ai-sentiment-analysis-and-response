# -------------------------------------------------------------------------------------
# NOTE 1: 
#   To run this on a remote host, ensure DOCKER_HOST environment variable is set.
#   Example: export DOCKER_HOST=“ssh://user@remotehost”
# -------------------------------------------------------------------------------------

services:

  # ----------------------------------------------------------------
  # [Container] Monitoring and Visualization
  # ----------------------------------------------------------------
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-grafana
    restart: unless-stopped
    ports:
      - '3003:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    entrypoint: ["/bin/sh", "/etc/grafana/docker-entrypoint.sh"]
    env_file:
      - .env
    environment:
      - GF_LOG_LEVEL=debug
      - GF_SECURITY_ADMIN_USER=${GRAFANA_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_SECURITY_ADMIN_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Analytical storage
  # ----------------------------------------------------------------
  postgres:
    image: postgres:latest
    container_name: ${PROJECT_NAME}-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Message Queue
  # ----------------------------------------------------------------
  rabbitmq:
    image: rabbitmq:management
    container_name: ${PROJECT_NAME}-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - '15673:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - ${PROJECT_NAME}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------------------------------
  # [Container] Ingestion Service
  # ----------------------------------------------------------------
  ingestion:
    build:
      context: .
      dockerfile: ./ingestion/Dockerfile
    container_name: ${PROJECT_NAME}-ingestion
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - INGESTION_REVIEWS_FILE=${INGESTION_REVIEWS_FILE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ${PROJECT_NAME}


  # ----------------------------------------------------------------
  # [Container] Ingestion Service
  # ----------------------------------------------------------------
  curation:
    build:
      context: .
      dockerfile: ./curation/Dockerfile
    container_name: ${PROJECT_NAME}-curation
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - CUSTOMERS_FILE=${CUSTOMERS_FILE}
    depends_on:
      - rabbitmq
      - ingestion
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Sentiment Processing Service
  # ----------------------------------------------------------------
  sentiment-processing:
    build:
      context: .
      dockerfile: ./sentiment-processing/Dockerfile
    container_name: ${PROJECT_NAME}-sentiment-processing
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - rabbitmq
      - postgres
      - curation
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Notification Service
  # ----------------------------------------------------------------
  notification:
    build:
      context: .
      dockerfile: ./notification/Dockerfile
    container_name: ${PROJECT_NAME}-notification
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - rabbitmq
      - sentiment-processing
      - anomaly-detection
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Outgoing Service
  # ----------------------------------------------------------------
  outgoing:
    build:
      context: .
      dockerfile: ./response/Dockerfile
    container_name: ${PROJECT_NAME}-outgoing
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - rabbitmq
      - sentiment-processing
    networks:
      - ${PROJECT_NAME}

  # ----------------------------------------------------------------
  # [Container] Anomaly Detection Service
  # ----------------------------------------------------------------
  anomaly-detection:
    build:
      context: .
      dockerfile: ./anomaly-detection/Dockerfile
    container_name: ${PROJECT_NAME}-anomaly-detection
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - postgres
      - sentiment-processing
    networks:
      - ${PROJECT_NAME}


volumes:
  rabbitmq_data:
  grafana-data:
  postgres_data:

networks:
  fps-blueprint-sentiment-analysis:
    driver: bridge